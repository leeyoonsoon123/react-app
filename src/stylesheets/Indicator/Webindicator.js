import React, { Component } from 'react'
import '../../stylesheets/Indicator/ani.css'

//
//  WebIndicator.js
//  DeliusWeb
//
//  Created by Yoonhwan on 2020/07/18.
//  Copyright Â© 2020 Delius. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



//// APIs you can use in your code:
//
// Available methods for drawing into <canvas> elements:
//    WebIndicator.drawCanvas1(canvas, point1, point2, point3, point4, point5, point6, targetFrame*, resizing*)
//
// NOTE: 'canvas' parameter can be either a <canvas> element object, or the id of a <canvas> element in your document.
//
// NOTE: Parameters marked with the '*' symbol are optional
//
// NOTE: Possible arguments for 'resizing' parameter in drawing methods are:
//   'aspectfit': The content is proportionally resized to fit into the target rectangle.
//   'aspectfill': The content is proportionally resized to completely fill the target rectangle.
//   'stretch': The content is stretched to match the entire target rectangle.
//   'center': The content is centered in the target rectangle, but it is NOT resized.
//
// Available Utilities:
//    WebIndicator.clearCanvas(canvas)
//    WebIndicator.makeRect(x, y, width, height)
//    WebIndicator.makePoint(x, y)


//// Create StyleKit Object
let WebIndicator = {};
const worker = (function() {

    //// Drawing Methods
    
    function drawCanvas1(canvas, point1, point2, point3, point4, point5, point6, targetFrame, resizing) {
        //// General Declarations
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        var context = canvas.getContext('2d');
        var pixelRatio = canvas.paintCodePixelRatio;
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 200, 200), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 200, resizedFrame.h / 200);


        //// Color Declarations
        var color1 = 'rgba(255, 128, 160, 1)';
        var color2 = 'rgba(247, 82, 138, 1)';
        var color3 = 'rgba(155, 88, 142, 1)';
        var color4 = 'rgba(247, 82, 138, 1)';
        var color5 = 'rgba(109, 146, 165, 1)';
        var color6 = 'rgba(231, 183, 179, 1)';

        //// Oval1 Drawing
        context.save();
        context.translate(point1.x, point1.y);

        oval(context, -15, -15, 30, 30);
        context.fillStyle = color1;
        context.fill();

        context.restore();


        //// Oval2 Drawing
        context.save();
        context.translate(point2.x, point2.y);

        oval(context, -15, -15, 30, 30);
        context.fillStyle = color2;
        context.fill();

        context.restore();


        //// Oval6 Drawing
        context.save();
        context.translate(point6.x, point6.y);

        oval(context, -15, -15, 30, 30);
        context.fillStyle = color6;
        context.fill();

        context.restore();


        //// Oval3 Drawing
        context.save();
        context.translate(point3.x, point3.y);

        oval(context, -15, -15, 30, 30);
        context.fillStyle = color3;
        context.fill();

        context.restore();


        //// Oval4 Drawing
        context.save();
        context.translate(point4.x, point4.y);

        oval(context, -15, -15, 30, 30);
        context.fillStyle = color4;
        context.fill();

        context.restore();


        //// Oval5 Drawing
        context.save();
        context.translate(point5.x, point5.y);

        oval(context, -15, -15, 30, 30);
        context.fillStyle = color5;
        context.fill();

        context.restore();
        
        context.restore();

    }

    //// Infrastructure

    function clearCanvas(canvas) {
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
    }

    // Possible arguments for 'resizing' parameter are:
    //   'aspectfit': The content is proportionally resized to fit into the target rectangle.
    //   'aspectfill': The content is proportionally resized to completely fill the target rectangle.
    //   'stretch': The content is stretched to match the entire target rectangle.
    //   'center': The content is centered in the target rectangle, but it is NOT resized.
    function applyResizingBehavior(resizing, rect, targetRect) {
        if (targetRect === undefined || equalRects(rect, targetRect) || equalRects(targetRect, makeRect(0, 0, 0, 0))) {
            return rect;
        }

        var scales = makeSize(0, 0);
        scales.w = Math.abs(targetRect.w / rect.w);
        scales.h = Math.abs(targetRect.h / rect.h);

        switch (resizing) {
            case 'aspectfit': {
                scales.w = Math.min(scales.w, scales.h);
                scales.h = scales.w;
                break;
            }
            case 'aspectfill': {
                scales.w = Math.max(scales.w, scales.h);
                scales.h = scales.w;
                break;
            }
            case 'stretch':
            case undefined:
                break;
            case 'center': {
                scales.w = 1;
                scales.h = 1;
                break;
            }
            default:
                throw 'Unknown resizing behavior "' + resizing + '". Use "aspectfit", "aspectfill", "stretch" or "center" as resizing behavior.';
                console.log(resizing)
                console.log(typeof(resizing))
        }

        var result = makeRect(Math.min(rect.x, rect.x + rect.w), Math.min(rect.y, rect.y + rect.h), Math.abs(rect.w), Math.abs(rect.h));
        result.w *= scales.w;
        result.h *= scales.h;
        result.x = targetRect.x + (targetRect.w - result.w) / 2;
        result.y = targetRect.y + (targetRect.h - result.h) / 2;
        return result;
    }

    function oval(context, x, y, w, h) {
        context.save();
        context.beginPath();
        context.translate(x, y);
        context.scale(w/2, h/2);
        context.arc(1, 1, 1, 0, 2*Math.PI, false);
        context.closePath();
        context.restore();
    }

    function makeRect(x, y, w, h) {
        return { x: x, y: y, w: w, h: h };
    }

    function equalRects(r1, r2) {
        return r1.x === r2.x && r1.y === r2.y && r1.w == r2.w && r1.h === r2.h;
    }

    function makePoint(x, y) {
        return { x: x, y: y };
    }

    function makeSize(w, h) {
        return { w: w, h: h };
    }

    function initializeCanvas(canvas) {
        if ('paintCodePixelRatio' in canvas) return canvas;
        // This function should only be called once on each canvas.
        var context = canvas.getContext('2d');

        var devicePixelRatio = window.devicePixelRatio || 1;
        var backingStorePixelRatio = context.webkitBackingStorePixelRatio
            || context.mozBackingStorePixelRatio
            || context.msBackingStorePixelRatio
            || context.oBackingStorePixelRatio
            || context.backingStorePixelRatio
            || 1;

        var pixelRatio = devicePixelRatio / backingStorePixelRatio;

        canvas.style.width = canvas.width + 'px';
        canvas.style.height = canvas.height + 'px';
        canvas.width *= pixelRatio;
        canvas.height *= pixelRatio;
        canvas.paintCodePixelRatio = pixelRatio;

        context.scale(pixelRatio, pixelRatio);
        return canvas;
    }
    function startAnimation(){
        var i = 1
        let timer = setInterval(() => {
            if (i > 900){
                i = 1
            }else{
                i = i + 2
            }
            WebIndicator.clearCanvas(document.getElementById('mainCanvas'))
            mainDraw(i)
        }, 6);
        return timer;
    }
    function endAnimation(timer){
        clearInterval(timer)
    }
    function mainDraw(input){
        if (input > 0 && input <100 ){
            step1(input)
        }else if( input >= 100 && input < 200 ){
            step2(input - 100)
        }else if( input >= 200 && input <300){
            step3(input -200)
        }else if (input >= 300 && input <400){
            step4(input -300)
        }else if (input >=400 && input <500){
            step5(input -400)
        }else if (input >=500 && input <600){
            step6(input -500)
        }else if (input >=600 && input <700){
            step7(input -600)
        }else if (input >=700 && input <800){
            step8(input -700)
        }else if (input >=800 && input <900){
            step9(input -800)
        }
        
        
    }
    function step1(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 ) 
        let A_x = 100 - 30 * value
        let A_y = 100 - 52 * value
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:100,y:100},{x:100,y:100},{x:100,y:100},{x:100,y:100},{x:100,y:100})
    }
    function step2(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 ) 
        let A_x = 70 +30 * value
        let A_y = 48 +52 * value
    
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:100,y:100},{x:100,y:100},{x:100,y:100},{x:100,y:100},{x:100,y:100})
    }
    function step3(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 ) 
        let A_x = 100 - 30 * value
        let A_y = 100 - 52 * value
        let B_x = 100 +30 * value 
        let B_y = 100 +52 * value 
    
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:B_x,y:B_y},{x:100,y:100},{x:100,y:100},{x:100,y:100},{x:100,y:100})
    }
    function step4(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 ) 
        let A_x = 70 +30 * value
        let A_y = 48 +52 * value
        let B_x = 130 -30 * value 
        let B_y = 152 -52 * value 
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:B_x,y:B_y},{x:100,y:100},{x:100,y:100},{x:100,y:100},{x:100,y:100})
    }
    function step5(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 ) 
        let A_x = 100 - 30 * value
        let A_y = 100 - 52 * value
        let B_x = 100 +30 * value 
        let B_y = 100 +52 * value 
        let C_x = 100 +30 *value
        let C_y = 100 -52*value
        let D_x = 100 - 30 * value
        let D_y = 100 +52 *value
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:B_x,y:B_y},{x:C_x,y:C_y},{x:D_x,y:D_y},{x:100,y:100},{x:100,y:100})
    }
    function step6(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 ) 
        let A_x = 70 +30 * value
        let A_y = 48 +52 * value
        let B_x = 130 -30 * value 
        let B_y = 152 -52 * value 
        let C_x = 130 -30 * value
        let C_y = 48 +52 * value
        let D_x = 70+30 * value
        let D_y = 152 -52*value
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:B_x,y:B_y},{x:C_x,y:C_y},{x:D_x,y:D_y},{x:100,y:100},{x:100,y:100})
    }
    function step7(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 ) 
        let A_x = 100 - 30 * value
        let A_y = 100 - 52 * value
        let B_x = 100 +30 * value 
        let B_y = 100 +52 * value 
        let C_x = 100 +30 *value
        let C_y = 100 -52*value
        let D_x = 100 - 30 * value
        let D_y = 100 +52 *value
        let E_x = 100 +60 *value
        let E_y = 100
        let F_x = 100 -60 * value
        let F_y = 100
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:B_x,y:B_y},{x:C_x,y:C_y},{x:D_x,y:D_y},{x:E_x,y:E_y},{x:F_x,y:F_y})
    }
    function step8(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 )
        let A_x = 70 +60*value
        let A_y = 48
        let B_x = 130 -60*value
        let B_y = 152
        let C_x = 130 + 30 * value
        let C_y = 48 +52 *value
        let D_x = 70-30*value
        let D_y = 152 -52*value
        let E_x = 160 - 30 * value
        let E_y = 100 +52 * value
        let F_x = 40+30*value
        let F_y = 100-52*value
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:B_x,y:B_y},{x:C_x,y:C_y},{x:D_x,y:D_y},{x:E_x,y:E_y},{x:F_x,y:F_y})
    }
    function step9(input){
        let value = ( input / 100 ) *( input / 100 ) *( input / 100 )
        let A_x = 130 -30*value
        let A_y = 48 +52*value
        let B_x = 70+30*value
        let B_y = 152 -52*value
        let C_x = 160 - 60*value
        let C_y = 100
        let D_x= 40 + 60*value
        let D_y = 100
        let E_x = 130 -30*value
        let E_y = 152-52*value
        let F_x = 70+30*value
        let F_y = 48 +52*value
        drawCanvas1(document.getElementById('mainCanvas'),{x:A_x,y:A_y},{x:B_x,y:B_y},{x:C_x,y:C_y},{x:D_x,y:D_y},{x:E_x,y:E_y},{x:F_x,y:F_y})
    }
    //// Public Interface

    // Drawing Methods
    WebIndicator.drawCanvas1 = drawCanvas1;
    WebIndicator.startAnimation = startAnimation;
    WebIndicator.endAnimation = endAnimation;
    // Utilities
    WebIndicator.clearCanvas = clearCanvas;
    WebIndicator.makeRect = makeRect;
    WebIndicator.makePoint = makePoint;

})();

class WebIndicator_view extends Component {
    constructor(props) {
        super(props);
    }

    componentDidMount() {
        this.WebIndicator = WebIndicator;
        this.worker = worker
    }

    render() {
        let classname;
        if(this.props.toggle) {
            classname = 'mod-indicator'
            this.timer = this.WebIndicator.startAnimation();
        }
        else {
            classname = 'disappear'
            if(this.timer) {
                this.WebIndicator.endAnimation(this.timer);
            }
        }
        return (
            <div className={classname}>
                <div className="popup-indicator">
                    <canvas id="mainCanvas" width="200" height="200" />
                    <div className='alert-message'>
                        {'ë¡ë©ì¤'} <br />
                    </div>
                </div>
            </div>
        )
    }
}

export default WebIndicator_view;